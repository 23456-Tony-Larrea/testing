{"ast":null,"code":"var _jsxFileName = \"D:\\\\vinculacion\\\\ami_app\\\\src\\\\pages\\\\draggableFist\\\\JigsawInit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport DraggablePiece from \"./DraggablePiece\";\nimport { useStyles } from \"./style\";\nimport TransitionsSnackbar from \"../dialogNotifications/notification\";\nimport useForceUpdate from \"use-force-update\";\nimport { Typography } from \"@material-ui/core\";\nimport AppNavBar from \"../../components/navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst {\n  List\n} = require(\"immutable\");\n\nconst httpGetProvin = {\n  currentLvl: \"nivel1\"\n};\nconst words = [\"ABCDEFGHIJKLMNÃ‘OPQRSTUVWXYZ\"];\nconst wordsx = [\"AEIOU\", \"DA\", \"DE\"];\n\nconst JigSawInit = () => {\n  _s();\n\n  const [word, setWord] = useState(false),\n        [arrayWord, setArrayWord] = useState([]),\n        [currentLevel, setCurrentLevel] = useState(false),\n        [levels, setlevels] = useState([]),\n        [changeLvl, setchangeLvl] = useState(false);\n  useEffect(() => {\n    getClevel(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const forceUpdate = useForceUpdate();\n  const childRef = useRef();\n\n  const getClevel = value => {\n    setCurrentLevel(httpGetProvin.currentLvl);\n\n    if (!currentLevel) {\n      encodeLevels(httpGetProvin.currentLvl);\n    } else {\n      encodeLevels(value);\n      setTimeout(() => {\n        setchangeLvl(false);\n      }, 800);\n      forceUpdate();\n    }\n  };\n\n  const encodeLevels = item => {\n    let array = [];\n    let i = 0;\n    let lettersContainer = []; // let lettersOriginal = [];\n\n    words.forEach(element => {\n      let i = words.indexOf(element) + 1;\n      array.splice(i, 0, \"nivel\" + i);\n    });\n    let lvlWord = words[0];\n    let lvlWordx = wordsx[i];\n    Array.from(lvlWord).forEach(element => {\n      lettersContainer.push(element + i);\n      i += 1;\n    });\n    lettersContainer = List(lettersContainer)._tail.array;\n    setArrayWord(lettersContainer);\n    setWord(lvlWordx);\n    setlevels(array);\n  };\n\n  const classes = useStyles();\n\n  const switchAction = value => {\n    childRef.current.handleClick(value);\n\n    if (value === \"correct\" && words[words.length - 1] !== word) {\n      nextLevel();\n    }\n  };\n\n  const nextLevel = () => {\n    setTimeout(() => {\n      setchangeLvl(true);\n    }, 800);\n    let i = levels.indexOf(currentLevel) + 2;\n    let changeLvlvar = \"nivel\" + i;\n    httpGetProvin.currentLvl = changeLvlvar;\n    getClevel(changeLvlvar);\n    forceUpdate();\n  };\n\n  const switchActionPrevLvl = () => {\n    if (words[0] !== word) {\n      previousLevel();\n    }\n  };\n\n  const previousLevel = () => {\n    setTimeout(() => {\n      setchangeLvl(true);\n    }, 800);\n    setchangeLvl(true);\n    let i = levels.indexOf(currentLevel);\n    let changeLvlvar = \"nivel\" + i;\n    httpGetProvin.currentLvl = changeLvlvar;\n    getClevel(changeLvlvar);\n    forceUpdate();\n  };\n\n  const DragabbleComponent = () => {\n    if (arrayWord.length === 0 && !currentLevel) {\n      /*#__PURE__*/\n      _jsxDEV(Typography, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this);\n    } else if (changeLvl) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.titleWord,\n          children: \"Cargando Nivel...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    } else if (!changeLvl) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"#6495ED\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            noValidate: true,\n            autoComplete: \"off\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              component: \"h4\",\n              className: classes.titleWord,\n              children: `Selecciona las letras para formar una palabra`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DraggablePiece, {\n          arrayWord: arrayWord,\n          switchAnswer: switchAction,\n          previousLevel: switchActionPrevLvl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: /*#__PURE__*/_jsxDEV(TransitionsSnackbar, {\n            ref: childRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: DragabbleComponent()\n  }, void 0, false);\n};\n\n_s(JigSawInit, \"C9FMR0Uxq1Fmpl+Q4FpeziFVsdY=\", false, function () {\n  return [useForceUpdate, useStyles];\n});\n\n_c = JigSawInit;\nexport default _c2 = /*#__PURE__*/React.forwardRef(JigSawInit);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"JigSawInit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/vinculacion/ami_app/src/pages/draggableFist/JigsawInit.js"],"names":["React","useState","useRef","useEffect","DraggablePiece","useStyles","TransitionsSnackbar","useForceUpdate","Typography","AppNavBar","List","require","httpGetProvin","currentLvl","words","wordsx","JigSawInit","word","setWord","arrayWord","setArrayWord","currentLevel","setCurrentLevel","levels","setlevels","changeLvl","setchangeLvl","getClevel","forceUpdate","childRef","value","encodeLevels","setTimeout","item","array","i","lettersContainer","forEach","element","indexOf","splice","lvlWord","lvlWordx","Array","from","push","_tail","classes","switchAction","current","handleClick","length","nextLevel","changeLvlvar","switchActionPrevLvl","previousLevel","DragabbleComponent","root","titleWord","backgroundColor","forwardRef"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport DraggablePiece from \"./DraggablePiece\";\r\nimport { useStyles } from \"./style\";\r\nimport TransitionsSnackbar from \"../dialogNotifications/notification\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport AppNavBar from \"../../components/navbar\";\r\n\r\n\r\nconst { List } = require(\"immutable\");\r\nconst httpGetProvin = {\r\n  currentLvl: \"nivel1\",\r\n};\r\nconst words = [\"ABCDEFGHIJKLMNÃ‘OPQRSTUVWXYZ\" ];\r\n\r\n\r\nconst wordsx = [\"AEIOU\", \"DA\", \"DE\"];\r\n\r\nconst JigSawInit = () => {\r\n  const [word, setWord] = useState(false),\r\n    [arrayWord, setArrayWord] = useState([]),\r\n    [currentLevel, setCurrentLevel] = useState(false),\r\n    [levels, setlevels] = useState([]),\r\n    [changeLvl, setchangeLvl] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getClevel();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  const forceUpdate = useForceUpdate();\r\n  const childRef = useRef();\r\n  const getClevel = (value) => {\r\n    setCurrentLevel(httpGetProvin.currentLvl);\r\n    if (!currentLevel) {\r\n      encodeLevels(httpGetProvin.currentLvl);\r\n    } else {\r\n      encodeLevels(value);\r\n      setTimeout(() => {\r\n        setchangeLvl(false);\r\n      }, 800);\r\n      forceUpdate();\r\n    }\r\n  };\r\n  const encodeLevels = (item) => {\r\n    let array = [];\r\n    let i = 0;\r\n    let lettersContainer = [];\r\n    // let lettersOriginal = [];\r\n\r\n    words.forEach((element) => {\r\n      let i = words.indexOf(element) + 1;\r\n      array.splice(i, 0, \"nivel\" + i);\r\n    });\r\n    let lvlWord = words[0];\r\n    let lvlWordx = wordsx[i];\r\n\r\n    Array.from(lvlWord).forEach((element) => {\r\n      lettersContainer.push(element + i);\r\n      i += 1;\r\n    });\r\n\r\n    lettersContainer = List(lettersContainer)._tail.array;\r\n    setArrayWord(lettersContainer);\r\n    setWord(lvlWordx);\r\n    setlevels(array);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const switchAction = (value) => {\r\n    childRef.current.handleClick(value);\r\n    if (value === \"correct\" && words[words.length - 1] !== word) {\r\n      nextLevel();\r\n    }\r\n  };\r\n\r\n  const nextLevel = () => {\r\n    setTimeout(() => {\r\n      setchangeLvl(true);\r\n    }, 800);\r\n    let i = levels.indexOf(currentLevel) + 2;\r\n    let changeLvlvar = \"nivel\" + i;\r\n    httpGetProvin.currentLvl = changeLvlvar;\r\n    getClevel(changeLvlvar);\r\n\r\n    forceUpdate();\r\n  };\r\n  const switchActionPrevLvl = () => {\r\n    if (words[0] !== word) {\r\n      previousLevel();\r\n    }\r\n  };\r\n  const previousLevel = () => {\r\n    setTimeout(() => {\r\n      setchangeLvl(true);\r\n    }, 800);\r\n    setchangeLvl(true);\r\n    let i = levels.indexOf(currentLevel);\r\n    let changeLvlvar = \"nivel\" + i;\r\n    httpGetProvin.currentLvl = changeLvlvar;\r\n    getClevel(changeLvlvar);\r\n    forceUpdate();\r\n  };\r\n  const DragabbleComponent = () => {\r\n    if (arrayWord.length === 0 && !currentLevel) {\r\n      <Typography>Loading...</Typography>;\r\n    } else if (changeLvl) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Typography className={classes.titleWord}>\r\n            Cargando Nivel...\r\n          </Typography>\r\n          ;\r\n        </div>\r\n      );\r\n    } else if (!changeLvl) {\r\n      return (\r\n        <div style={{ backgroundColor: \"#6495ED\" }}>\r\n          <AppNavBar />\r\n          <div className={classes.root}>\r\n            <form noValidate autoComplete=\"off\">\r\n              <Typography\r\n                variant=\"h4\"\r\n                component=\"h4\"\r\n                className={classes.titleWord}\r\n              >\r\n                {`Selecciona las letras para formar una palabra`}\r\n              </Typography>\r\n            </form>\r\n          </div>\r\n          <DraggablePiece\r\n            arrayWord={arrayWord}\r\n            switchAnswer={switchAction}\r\n            previousLevel={switchActionPrevLvl}\r\n          />\r\n          <div className={classes.root}>\r\n            <TransitionsSnackbar ref={childRef} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  return <>{DragabbleComponent()}</>;\r\n};\r\nexport default React.forwardRef(JigSawInit);\r\n"]},"metadata":{},"sourceType":"module"}