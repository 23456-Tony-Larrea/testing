{"ast":null,"code":"var _jsxFileName = \"D:\\\\vinculacion\\\\ami_app\\\\src\\\\pages\\\\Monosyllables\\\\monosyllables.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport DraggablePiece from \"../Monosyllables/DraggablePiece\";\nimport { useStyles } from \"./style\";\nimport TransitionsSnackbar from \"../dialogNotifications/notification\";\nimport useForceUpdate from \"use-force-update\";\nimport { Typography } from \"@material-ui/core\";\nimport AppNavBar from '../../components/navbar';\nimport { useHistory } from \"react-router-dom\";\nimport { Grid } from '@material-ui/core';\nimport { Card } from \"@material-ui/core\";\nimport { Carousel } from \"react-responsive-carousel\";\nimport { CardMedia } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst {\n  List\n} = require(\"immutable\");\n\nconst httpGetProvin = {\n  currentLvl: \"nivel1\"\n};\nconst words = [\n/* \"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ\" */\n\"Ley\", \"Flor\", \"Flan\", \"Ver\", \"Sol\", \"Diez\"];\nconst img = [{\n  photo: [\"../../../images/ley.png\"]\n}, {\n  photo: [\"../../../images/flor.png\"]\n}, {\n  photo: [\"../../../images/flan.png\"]\n}, {\n  photo: [\"../../../images/ver.png\"]\n}, {\n  photo: [\"../../../images/sol.png\"]\n}, {\n  photo: [\"../../../images/diez.png\"]\n}];\n/* //const words = ['AVIÓN','ÁRBOL','ABEJA',\r\n  'BALÓN','BARCO','CASA','CONEJO',\r\n  'DADO','DIENTE','CHOCOLATE','ESPEJO',\r\n  'ESCALERA','FRESA','FUEGO','JOYA','JARRA',\r\n  'GATO','GUANTE','KIWI','KARATE','ISLA','IGLU',\r\n  'LLAVE','LLAMA','LÁPIZ','LIMÓN','OSO','OJO',\r\n  'MANO','MAPA','PERA','PEZ','NAVE','NIÑO',\r\n  'QUESO','QUÍMICA','RAMA','RANA','UÑA','UVA',\r\n  'SANDIA','SILLA','VACA','VELA','TAZA','TIGRE',\r\n  'YATE','YUNQUE'// */\n//];\n\nconst Monosyllables = () => {\n  _s();\n\n  const [word, setWord] = useState(false),\n        [arrayWord, setArrayWord] = useState([]),\n        [currentLevel, setCurrentLevel] = useState(false),\n        [levels, setlevels] = useState([]),\n        [changeLvl, setchangeLvl] = useState(false);\n  const history = useHistory();\n  const [canvas] = useState(\"#4FA1F3 \");\n  const [brush] = useState(6);\n  const lienzo = useState(null);\n\n  const clear = () => {\n    lienzo.current.clear();\n  };\n\n  useEffect(() => {\n    getClevel(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const forceUpdate = useForceUpdate();\n  const childRef = useRef();\n\n  const getClevel = value => {\n    setCurrentLevel(httpGetProvin.currentLvl);\n\n    if (!currentLevel) {\n      encodeLevels(httpGetProvin.currentLvl);\n    } else {\n      encodeLevels(value);\n      setTimeout(() => {\n        setchangeLvl(false);\n      }, 800);\n      forceUpdate();\n    }\n  };\n\n  const encodeLevels = item => {\n    let array = [];\n    let i = 0;\n    let lettersContainer = [];\n    words.forEach(element => {\n      let i = words.indexOf(element) + 1;\n      array.splice(i, 0, \"nivel\" + i);\n    });\n    let lvlWord = words[array.indexOf(item)];\n    console.log(item);\n    Array.from(lvlWord).forEach(element => {\n      lettersContainer.push(element + i);\n      i += 1;\n    });\n    lettersContainer = List(lettersContainer)._tail.array;\n    setArrayWord(lettersContainer);\n    setWord(lvlWord);\n    setlevels(array);\n  };\n\n  const classes = useStyles();\n\n  const switchAction = value => {\n    childRef.current.handleClick(value);\n\n    if (value === \"correct\" && words[words.length - 1] !== word) {\n      nextLevel();\n    }\n  };\n\n  const nextLevel = () => {\n    setTimeout(() => {\n      setchangeLvl(true);\n    }, 800);\n    let i = levels.indexOf(currentLevel) + 2;\n    let changeLvlvar = \"nivel\" + i;\n    httpGetProvin.currentLvl = changeLvlvar;\n    getClevel(changeLvlvar);\n    history.push(\"/Monosyllables\");\n    forceUpdate();\n  };\n\n  const switchActionPrevLvl = () => {\n    if (words[0] !== word) {\n      previousLevel();\n    }\n  };\n\n  const previousLevel = () => {\n    setTimeout(() => {\n      setchangeLvl(true);\n    }, 800);\n    setchangeLvl(true);\n    let i = levels.indexOf(currentLevel);\n    let changeLvlvar = \"nivel\" + i;\n    httpGetProvin.currentLvl = changeLvlvar;\n    console.log(changeLvlvar);\n    getClevel(changeLvlvar);\n    forceUpdate();\n  };\n\n  const DragabbleComponent = () => {\n    if (arrayWord.length === 0 && !currentLevel) {\n      /*#__PURE__*/\n      _jsxDEV(Typography, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this);\n    } else if (changeLvl) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.titleWord,\n          children: \"Cargando Nivel...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this);\n    } else if (!changeLvl) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"#6495ED\",\n            minheight: \"100vh\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.root,\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              noValidate: true,\n              autoComplete: \"off\",\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                component: \"h3\",\n                className: classes.titleWord,\n                children: `Forma la siguiente palabra Monosilaba correctamente  \"${word}\"`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DraggablePiece, {\n            arrayWord: arrayWord,\n            switchAnswer: switchAction,\n            previousLevel: switchActionPrevLvl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.root,\n            children: /*#__PURE__*/_jsxDEV(TransitionsSnackbar, {\n              ref: childRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            style: {\n              textAlign: \"center\",\n              alignItems: \"center\"\n            },\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              style: {\n                margin: 25,\n                position: \"relative\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Carousel, {\n                emulateTouch: true,\n                onChange: clear,\n                children: img.map(e => /*#__PURE__*/_jsxDEV(Card, {\n                  className: classes.root,\n                  children: /*#__PURE__*/_jsxDEV(CardMedia, {\n                    className: classes.media,\n                    image: e.photo\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 17\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: DragabbleComponent()\n  }, void 0, false);\n};\n\n_s(Monosyllables, \"GNfHd07rcPoLoc5UZMrLM5J3N10=\", false, function () {\n  return [useHistory, useForceUpdate, useStyles];\n});\n\n_c = Monosyllables;\nexport default _c2 = /*#__PURE__*/React.forwardRef(Monosyllables);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Monosyllables\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/vinculacion/ami_app/src/pages/Monosyllables/monosyllables.js"],"names":["React","useState","useRef","useEffect","DraggablePiece","useStyles","TransitionsSnackbar","useForceUpdate","Typography","AppNavBar","useHistory","Grid","Card","Carousel","CardMedia","List","require","httpGetProvin","currentLvl","words","img","photo","Monosyllables","word","setWord","arrayWord","setArrayWord","currentLevel","setCurrentLevel","levels","setlevels","changeLvl","setchangeLvl","history","canvas","brush","lienzo","clear","current","getClevel","forceUpdate","childRef","value","encodeLevels","setTimeout","item","array","i","lettersContainer","forEach","element","indexOf","splice","lvlWord","console","log","Array","from","push","_tail","classes","switchAction","handleClick","length","nextLevel","changeLvlvar","switchActionPrevLvl","previousLevel","DragabbleComponent","root","titleWord","backgroundColor","minheight","textAlign","alignItems","margin","position","map","e","media","forwardRef"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,SAAT,QAA0B,mBAA1B;;;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE;AADQ,CAAtB;AAGA,MAAMC,KAAK,GAAG;AAAC;AAAoC,KAArC,EAA4C,MAA5C,EAAmD,MAAnD,EAA0D,KAA1D,EAAgE,KAAhE,EAAsE,MAAtE,CAAd;AACA,MAAMC,GAAG,GAAG,CACV;AAAEC,EAAAA,KAAK,EAAE,CAAC,yBAAD;AAAT,CADU,EAEV;AAAEA,EAAAA,KAAK,EAAE,CAAC,0BAAD;AAAT,CAFU,EAGV;AAAEA,EAAAA,KAAK,EAAE,CAAC,0BAAD;AAAT,CAHU,EAIV;AAAEA,EAAAA,KAAK,EAAE,CAAC,yBAAD;AAAT,CAJU,EAKV;AAAEA,EAAAA,KAAK,EAAE,CAAC,yBAAD;AAAT,CALU,EAMV;AAAEA,EAAAA,KAAK,EAAE,CAAC,0BAAD;AAAT,CANU,CAAZ;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,KAAD,CAAhC;AAAA,QACE,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAC,EAAD,CADtC;AAAA,QAEE,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,KAAD,CAF5C;AAAA,QAGE,CAAC4B,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,EAAD,CAHhC;AAAA,QAIE,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,KAAD,CAJtC;AAKE,QAAMgC,OAAO,GAAGvB,UAAU,EAA1B;AACA,QAAM,CAACwB,MAAD,IAAWjC,QAAQ,CAAC,UAAD,CAAzB;AACA,QAAM,CAACkC,KAAD,IAAUlC,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAMmC,MAAM,GAAGnC,QAAQ,CAAC,IAAD,CAAvB;;AAEA,QAAMoC,KAAK,GAAG,MAAM;AAClBD,IAAAA,MAAM,CAACE,OAAP,CAAeD,KAAf;AACD,GAFD;;AAGFlC,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,SAAS,GADK,CAEhB;AACC,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMC,WAAW,GAAGjC,cAAc,EAAlC;AACA,QAAMkC,QAAQ,GAAGvC,MAAM,EAAvB;;AACA,QAAMqC,SAAS,GAAIG,KAAD,IAAW;AAC3Bd,IAAAA,eAAe,CAACX,aAAa,CAACC,UAAf,CAAf;;AACA,QAAI,CAACS,YAAL,EAAmB;AACjBgB,MAAAA,YAAY,CAAC1B,aAAa,CAACC,UAAf,CAAZ;AACD,KAFD,MAEO;AACLyB,MAAAA,YAAY,CAACD,KAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,MAAM;AACfZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAFS,EAEP,GAFO,CAAV;AAGAQ,MAAAA,WAAW;AACZ;AACF,GAXD;;AAaA,QAAMG,YAAY,GAAIE,IAAD,IAAU;AAC7B,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,gBAAgB,GAAG,EAAvB;AACA7B,IAAAA,KAAK,CAAC8B,OAAN,CAAeC,OAAD,IAAa;AACzB,UAAIH,CAAC,GAAG5B,KAAK,CAACgC,OAAN,CAAcD,OAAd,IAAyB,CAAjC;AACAJ,MAAAA,KAAK,CAACM,MAAN,CAAaL,CAAb,EAAgB,CAAhB,EAAmB,UAAUA,CAA7B;AACD,KAHD;AAIA,QAAIM,OAAO,GAAGlC,KAAK,CAAC2B,KAAK,CAACK,OAAN,CAAcN,IAAd,CAAD,CAAnB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACAW,IAAAA,KAAK,CAACC,IAAN,CAAWJ,OAAX,EAAoBJ,OAApB,CAA6BC,OAAD,IAAa;AACvCF,MAAAA,gBAAgB,CAACU,IAAjB,CAAsBR,OAAO,GAAGH,CAAhC;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD,KAHD;AAIAC,IAAAA,gBAAgB,GAAGjC,IAAI,CAACiC,gBAAD,CAAJ,CAAuBW,KAAvB,CAA6Bb,KAAhD;AACApB,IAAAA,YAAY,CAACsB,gBAAD,CAAZ;AACAxB,IAAAA,OAAO,CAAC6B,OAAD,CAAP;AACAvB,IAAAA,SAAS,CAACgB,KAAD,CAAT;AACD,GAlBD;;AAoBA,QAAMc,OAAO,GAAGvD,SAAS,EAAzB;;AACA,QAAMwD,YAAY,GAAInB,KAAD,IAAW;AAC9BD,IAAAA,QAAQ,CAACH,OAAT,CAAiBwB,WAAjB,CAA6BpB,KAA7B;;AACA,QAAIA,KAAK,KAAK,SAAV,IAAuBvB,KAAK,CAACA,KAAK,CAAC4C,MAAN,GAAe,CAAhB,CAAL,KAA4BxC,IAAvD,EAA6D;AAC3DyC,MAAAA,SAAS;AACV;AACF,GALD;;AAOA,QAAMA,SAAS,GAAG,MAAM;AACtBpB,IAAAA,UAAU,CAAC,MAAM;AACfZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFS,EAEP,GAFO,CAAV;AAGA,QAAIe,CAAC,GAAGlB,MAAM,CAACsB,OAAP,CAAexB,YAAf,IAA+B,CAAvC;AACA,QAAIsC,YAAY,GAAG,UAAUlB,CAA7B;AACA9B,IAAAA,aAAa,CAACC,UAAd,GAA2B+C,YAA3B;AACA1B,IAAAA,SAAS,CAAC0B,YAAD,CAAT;AACAhC,IAAAA,OAAO,CAACyB,IAAR,CAAa,gBAAb;AACAlB,IAAAA,WAAW;AACZ,GAVD;;AAYA,QAAM0B,mBAAmB,GAAG,MAAM;AAChC,QAAI/C,KAAK,CAAC,CAAD,CAAL,KAAaI,IAAjB,EAAuB;AACrB4C,MAAAA,aAAa;AACd;AACF,GAJD;;AAMA,QAAMA,aAAa,GAAG,MAAM;AAC1BvB,IAAAA,UAAU,CAAC,MAAM;AACfZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFS,EAEP,GAFO,CAAV;AAGAA,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAIe,CAAC,GAAGlB,MAAM,CAACsB,OAAP,CAAexB,YAAf,CAAR;AACA,QAAIsC,YAAY,GAAG,UAAUlB,CAA7B;AACA9B,IAAAA,aAAa,CAACC,UAAd,GAA2B+C,YAA3B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ;AACA1B,IAAAA,SAAS,CAAC0B,YAAD,CAAT;AACAzB,IAAAA,WAAW;AACZ,GAXD;;AAaA,QAAM4B,kBAAkB,GAAG,MAAM;AAC/B,QAAI3C,SAAS,CAACsC,MAAV,KAAqB,CAArB,IAA0B,CAACpC,YAA/B,EAA6C;AAC3C;AAAA,cAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,KAFD,MAEO,IAAII,SAAJ,EAAe;AACpB,0BACE;AAAK,QAAA,SAAS,EAAE6B,OAAO,CAACS,IAAxB;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAET,OAAO,CAACU,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATM,MASA,IAAI,CAACvC,SAAL,EAAgB;AACrB,0BACE;AAAA,+BACE;AAAK,UAAA,KAAK,EAAE;AAAEwC,YAAAA,eAAe,EAAE,SAAnB;AAA8BC,YAAAA,SAAS,EAAE;AAAzC,WAAZ;AAAA,kCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAEZ,OAAO,CAACS,IAAxB;AAAA,mCACE;AAAM,cAAA,UAAU,MAAhB;AAAiB,cAAA,YAAY,EAAC,KAA9B;AAAA,qCACE,QAAC,UAAD;AACE,gBAAA,OAAO,EAAC,IADV;AAEE,gBAAA,SAAS,EAAC,IAFZ;AAGE,gBAAA,SAAS,EAAET,OAAO,CAACU,SAHrB;AAAA,0BAMI,yDAAwD/C,IAAK;AANjE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAeE,QAAC,cAAD;AACE,YAAA,SAAS,EAAEE,SADb;AAEE,YAAA,YAAY,EAAEoC,YAFhB;AAGE,YAAA,aAAa,EAAEK;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAfF,eAqBI;AAAK,YAAA,SAAS,EAAEN,OAAO,CAACS,IAAxB;AAAA,mCACE,QAAC,mBAAD;AAAqB,cAAA,GAAG,EAAE5B;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBArBJ,eAyBS,QAAC,IAAD;AACT,YAAA,KAAK,EAAE;AAAEgC,cAAAA,SAAS,EAAE,QAAb;AAAuBC,cAAAA,UAAU,EAAE;AAAnC,aADE;AAET,YAAA,EAAE,EAAE,EAFK;AAGT,YAAA,EAAE,EAAE,CAHK;AAAA,mCAKT,QAAC,IAAD;AAAM,cAAA,KAAK,EAAE;AAAEC,gBAAAA,MAAM,EAAE,EAAV;AAAcC,gBAAAA,QAAQ,EAAE;AAAxB,eAAb;AAAA,qCACE,QAAC,QAAD;AAAU,gBAAA,YAAY,EAAE,IAAxB;AAA8B,gBAAA,QAAQ,EAAEvC,KAAxC;AAAA,0BACGjB,GAAG,CAACyD,GAAJ,CAASC,CAAD,iBACP,QAAC,IAAD;AAAM,kBAAA,SAAS,EAAElB,OAAO,CAACS,IAAzB;AAAA,yCACE,QAAC,SAAD;AAAW,oBAAA,SAAS,EAAET,OAAO,CAACmB,KAA9B;AAAqC,oBAAA,KAAK,EAAED,CAAC,CAACzD;AAA9C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALS;AAAA;AAAA;AAAA;AAAA,kBAzBT;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,uBADF;AA6CD;AACF,GA3DD;;AA4DA,sBAAO;AAAA,cAAG+C,kBAAkB;AAArB,mBAAP;AACD,CA1JD;;GAAM9C,a;UAMcZ,U,EAaEH,c,EAmCJF,S;;;KAtDZiB,a;AA2JN,kCAAetB,KAAK,CAACgF,UAAN,CAAiB1D,aAAjB,CAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport DraggablePiece from \"../Monosyllables/DraggablePiece\";\r\nimport { useStyles } from \"./style\";\r\nimport TransitionsSnackbar from \"../dialogNotifications/notification\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport AppNavBar from '../../components/navbar'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {Grid} from '@material-ui/core'\r\nimport { Card } from \"@material-ui/core\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport { CardMedia } from \"@material-ui/core\";\r\nconst { List } = require(\"immutable\");\r\nconst httpGetProvin = {\r\n  currentLvl: \"nivel1\",\r\n};\r\nconst words = [/* \"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ\" */ \"Ley\" ,\"Flor\",\"Flan\",\"Ver\",\"Sol\",\"Diez\"];\r\nconst img = [\r\n  { photo: [\"../../../images/ley.png\",] },\r\n  { photo: [\"../../../images/flor.png\"] },\r\n  { photo: [\"../../../images/flan.png\"] },\r\n  { photo: [\"../../../images/ver.png\"] },\r\n  { photo: [\"../../../images/sol.png\"] },\r\n  { photo: [\"../../../images/diez.png\"] },\r\n];\r\n\r\n\r\n\r\n  \r\n/* //const words = ['AVIÓN','ÁRBOL','ABEJA',\r\n  'BALÓN','BARCO','CASA','CONEJO',\r\n  'DADO','DIENTE','CHOCOLATE','ESPEJO',\r\n  'ESCALERA','FRESA','FUEGO','JOYA','JARRA',\r\n  'GATO','GUANTE','KIWI','KARATE','ISLA','IGLU',\r\n  'LLAVE','LLAMA','LÁPIZ','LIMÓN','OSO','OJO',\r\n  'MANO','MAPA','PERA','PEZ','NAVE','NIÑO',\r\n  'QUESO','QUÍMICA','RAMA','RANA','UÑA','UVA',\r\n  'SANDIA','SILLA','VACA','VELA','TAZA','TIGRE',\r\n  'YATE','YUNQUE'// */\r\n//];\r\nconst Monosyllables = () => {\r\n  const [word, setWord] = useState(false),\r\n    [arrayWord, setArrayWord] = useState([]),\r\n    [currentLevel, setCurrentLevel] = useState(false),\r\n    [levels, setlevels] = useState([]),\r\n    [changeLvl, setchangeLvl] = useState(false);\r\n    const history = useHistory();\r\n    const [canvas] = useState(\"#4FA1F3 \");\r\n    const [brush] = useState(6);\r\n    const lienzo = useState(null);\r\n  \r\n    const clear = () => {\r\n      lienzo.current.clear();\r\n    };\r\n  useEffect(() => {\r\n    getClevel();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const forceUpdate = useForceUpdate();\r\n  const childRef = useRef();\r\n  const getClevel = (value) => {\r\n    setCurrentLevel(httpGetProvin.currentLvl);\r\n    if (!currentLevel) {\r\n      encodeLevels(httpGetProvin.currentLvl);\r\n    } else {\r\n      encodeLevels(value);\r\n      setTimeout(() => {\r\n        setchangeLvl(false);\r\n      }, 800);\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  const encodeLevels = (item) => {\r\n    let array = [];\r\n    let i = 0;\r\n    let lettersContainer = [];\r\n    words.forEach((element) => {\r\n      let i = words.indexOf(element) + 1;\r\n      array.splice(i, 0, \"nivel\" + i);\r\n    });\r\n    let lvlWord = words[array.indexOf(item)];\r\n    console.log(item);\r\n    Array.from(lvlWord).forEach((element) => {\r\n      lettersContainer.push(element + i);\r\n      i += 1;\r\n    });\r\n    lettersContainer = List(lettersContainer)._tail.array;\r\n    setArrayWord(lettersContainer);\r\n    setWord(lvlWord);\r\n    setlevels(array);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const switchAction = (value) => {\r\n    childRef.current.handleClick(value);\r\n    if (value === \"correct\" && words[words.length - 1] !== word) {\r\n      nextLevel();\r\n    }\r\n  };\r\n\r\n  const nextLevel = () => {\r\n    setTimeout(() => {\r\n      setchangeLvl(true);\r\n    }, 800);\r\n    let i = levels.indexOf(currentLevel) + 2;\r\n    let changeLvlvar = \"nivel\" + i;\r\n    httpGetProvin.currentLvl = changeLvlvar;\r\n    getClevel(changeLvlvar);\r\n    history.push(\"/Monosyllables\");\r\n    forceUpdate();\r\n  };\r\n\r\n  const switchActionPrevLvl = () => {\r\n    if (words[0] !== word) {\r\n      previousLevel();\r\n    }\r\n  };\r\n\r\n  const previousLevel = () => {\r\n    setTimeout(() => {\r\n      setchangeLvl(true);\r\n    }, 800);\r\n    setchangeLvl(true);\r\n    let i = levels.indexOf(currentLevel);\r\n    let changeLvlvar = \"nivel\" + i;\r\n    httpGetProvin.currentLvl = changeLvlvar;\r\n    console.log(changeLvlvar);\r\n    getClevel(changeLvlvar);\r\n    forceUpdate();\r\n  };\r\n  \r\n  const DragabbleComponent = () => {\r\n    if (arrayWord.length === 0 && !currentLevel) {\r\n      <Typography>Loading...</Typography>;\r\n    } else if (changeLvl) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Typography className={classes.titleWord}>\r\n            Cargando Nivel...\r\n          </Typography>\r\n          ;\r\n        </div>\r\n      );\r\n    } else if (!changeLvl) {\r\n      return (\r\n        <>\r\n          <div style={{ backgroundColor: \"#6495ED\", minheight: \"100vh\" }}>\r\n            <AppNavBar />\r\n            <div className={classes.root}>\r\n              <form noValidate autoComplete=\"off\">\r\n                <Typography\r\n                  variant=\"h3\"\r\n                  component=\"h3\"\r\n                  className={classes.titleWord}\r\n                  \r\n                >\r\n                  {`Forma la siguiente palabra Monosilaba correctamente  \"${word}\"`}\r\n                </Typography>\r\n              </form>\r\n            </div>\r\n\r\n            <DraggablePiece\r\n              arrayWord={arrayWord}\r\n              switchAnswer={switchAction}\r\n              previousLevel={switchActionPrevLvl}\r\n            />\r\n            {\r\n              <div className={classes.root}>\r\n                <TransitionsSnackbar ref={childRef} />\r\n              </div>\r\n            }\r\n                   <Grid\r\n          style={{ textAlign: \"center\", alignItems: \"center\" }}\r\n          xs={12}\r\n          sm={6}\r\n        >\r\n          <Grid style={{ margin: 25, position: \"relative\" }}>\r\n            <Carousel emulateTouch={true} onChange={clear}>\r\n              {img.map((e) => (\r\n                <Card className={classes.root}>\r\n                  <CardMedia className={classes.media} image={e.photo} />\r\n                </Card>\r\n              ))}\r\n            </Carousel>\r\n          </Grid>\r\n        </Grid>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n  return <>{DragabbleComponent()}</>;\r\n}\r\nexport default React.forwardRef(Monosyllables);"]},"metadata":{},"sourceType":"module"}