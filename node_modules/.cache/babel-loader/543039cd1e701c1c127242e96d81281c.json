{"ast":null,"code":"var _jsxFileName = \"D:\\\\vinculacion\\\\ami_app\\\\src\\\\pages\\\\Monosyllables\\\\DraggablePiece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStyles } from \"../Monosyllables/style1\";\nimport useForceUpdate from \"use-force-update\";\nimport { Button } from \"@material-ui/core\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DraggablePiece(props) {\n  _s();\n\n  const [textContent, setTextContent] = useState(Array),\n        [stateArrayItems, setStateArrayItems] = useState(Array),\n        [puzzleSolve, setPuzzleSolve] = useState(Array);\n  const classes = useStyles();\n  useEffect(() => {\n    begingComponents();\n    forceUpdate(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const forceUpdate = useForceUpdate();\n\n  const shuffle = array => {\n    const mix = array.sort(() => Math.random() - 0.5);\n    return mix;\n  };\n\n  const begingComponents = () => {\n    const word = props.arrayWord;\n    setTextContent(shuffle(word));\n    setStateArrayItems(new Array(props.arrayWord.length));\n    setPuzzleSolve(new Array(props.arrayWord.length));\n  };\n\n  const fixWord = (a, b) => {\n    if (a && b && a !== undefined && b !== undefined && b[0] !== undefined) {\n      let option1 = [];\n      let option2 = [];\n      a.forEach(element => {\n        option1.push(element[0]);\n      });\n      b.forEach(element => {\n        if (element !== undefined || element) {\n          option2.push(element[0]);\n        }\n      });\n\n      if (option1.length === option2.length && JSON.stringify(option1) === JSON.stringify(option2)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const finalSolve = () => {\n    let solv = textContent.sort((a, b) => {\n      let firstLetter = a.split(a[0]);\n      let secondLetter = b.split(b[0]);\n      return firstLetter[1] - secondLetter[1];\n    });\n    fixWord(solv, puzzleSolve) ? props.switchAnswer(\"correct\") : props.switchAnswer(\"wrong\");\n    le;\n  };\n\n  const previousLevel = () => {\n    props.previousLevel();\n  };\n\n  const setText = (item, state) => {\n    let arrayUpdated = stateArrayItems;\n    let i = textContent.indexOf(item);\n    arrayUpdated[i] === undefined ? arrayUpdated[i] = false : arrayUpdated[i] = undefined;\n\n    if (state) {\n      for (let index = 0; index < arrayUpdated.length; index++) {\n        let arrayPuzzleSolve = puzzleSolve;\n\n        if (arrayPuzzleSolve[index] === undefined) {\n          arrayPuzzleSolve[index] = item;\n          setPuzzleSolve(arrayPuzzleSolve);\n          break;\n        }\n      }\n    } else {\n      let arrayPuzzleDisolve = puzzleSolve;\n\n      for (let index = 0; index < arrayPuzzleDisolve.length; index++) {\n        let arrayPuzzleDisolve = puzzleSolve;\n\n        if (arrayPuzzleDisolve[index] === item) {\n          arrayPuzzleDisolve[index] = undefined;\n          setPuzzleSolve(arrayPuzzleDisolve);\n          break;\n        }\n      }\n    }\n\n    setStateArrayItems(arrayUpdated);\n    forceUpdate();\n  };\n\n  if (textContent && stateArrayItems) {\n    let ikey = 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.rootGrid,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"center\",\n            children: puzzleSolve.map(content => {\n              ikey += 1;\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Zoom, {\n                  in: content !== undefined,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.rootEmptyCard,\n                    children: content === undefined ? null : /*#__PURE__*/_jsxDEV(CardContent, {\n                      onClick: () => setText(content, false),\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.title,\n                        children: content === undefined ? null : Array.from(content)[0]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 122,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 21\n                }, this)\n              }, ikey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"center\",\n            children: textContent.map(content => {\n              ikey += 10;\n              let i = textContent.indexOf(content);\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Zoom, {\n                  in: stateArrayItems[i] === undefined,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.rootCard,\n                    children: stateArrayItems[i] !== undefined ? null : /*#__PURE__*/_jsxDEV(CardContent, {\n                      onClick: () => setText(content, true),\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.title,\n                        children: stateArrayItems[i] !== undefined ? null : Array.from(content)[0]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 145,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 21\n                }, this)\n              }, ikey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !puzzleSolve[0],\n                onClick: finalSolve,\n                variant: \"contained\",\n                size: \"large\",\n                className: classes.buttonCheck,\n                children: \"Siguiente\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: previousLevel,\n                variant: \"contained\",\n                size: \"large\",\n                className: classes.buttonCheck,\n                children: \"Anterior\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(DraggablePiece, \"aXUbG55r9GDT3Xa0i0HFQvugngo=\", false, function () {\n  return [useStyles, useForceUpdate];\n});\n\n_c = DraggablePiece;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggablePiece\");","map":{"version":3,"sources":["D:/vinculacion/ami_app/src/pages/Monosyllables/DraggablePiece.js"],"names":["React","useEffect","useState","Card","CardContent","Typography","Grid","useStyles","useForceUpdate","Button","Zoom","DraggablePiece","props","textContent","setTextContent","Array","stateArrayItems","setStateArrayItems","puzzleSolve","setPuzzleSolve","classes","begingComponents","forceUpdate","shuffle","array","mix","sort","Math","random","word","arrayWord","length","fixWord","a","b","undefined","option1","option2","forEach","element","push","JSON","stringify","finalSolve","solv","firstLetter","split","secondLetter","switchAnswer","le","previousLevel","setText","item","state","arrayUpdated","i","indexOf","index","arrayPuzzleSolve","arrayPuzzleDisolve","ikey","rootGrid","map","content","rootEmptyCard","title","from","rootCard","buttonCheck"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useStyles } from \"../Monosyllables/style1\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\n\r\nexport default function DraggablePiece(props) {\r\n  const [textContent, setTextContent] = useState(Array),\r\n    [stateArrayItems, setStateArrayItems] = useState(Array),\r\n    [puzzleSolve, setPuzzleSolve] = useState(Array);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    begingComponents();\r\n    forceUpdate();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const forceUpdate = useForceUpdate();\r\n  const shuffle = (array) => {\r\n    const mix = array.sort(() => Math.random() - 0.5);\r\n    return mix;\r\n  };\r\n\r\n  const begingComponents = () => {\r\n    const word = props.arrayWord;\r\n    setTextContent(shuffle(word));\r\n    setStateArrayItems(new Array(props.arrayWord.length));\r\n    setPuzzleSolve(new Array(props.arrayWord.length));\r\n  };\r\n\r\n  const fixWord = (a, b) => {\r\n    if (a && b && a !== undefined && b !== undefined && b[0] !== undefined) {\r\n      let option1 = [];\r\n      let option2 = [];\r\n      a.forEach((element) => {\r\n        option1.push(element[0]);\r\n      });\r\n      b.forEach((element) => {\r\n        if (element !== undefined || element) {\r\n          option2.push(element[0]);\r\n        }\r\n      });\r\n      if (\r\n        option1.length === option2.length &&\r\n        JSON.stringify(option1) === JSON.stringify(option2)\r\n      ) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const finalSolve = () => {\r\n    let solv = textContent.sort((a, b) => {\r\n      let firstLetter = a.split(a[0]);\r\n      let secondLetter = b.split(b[0]);\r\n      return firstLetter[1] - secondLetter[1];\r\n    });\r\n    fixWord(solv, puzzleSolve)\r\n      ? props.switchAnswer(\"correct\")\r\n      : props.switchAnswer(\"wrong\");\r\n     le\r\n    };\r\n\r\n  const previousLevel = () => {\r\n    props.previousLevel();\r\n  };\r\n\r\n  const setText = (item, state) => {\r\n    let arrayUpdated = stateArrayItems;\r\n    let i = textContent.indexOf(item);\r\n    arrayUpdated[i] === undefined\r\n      ? (arrayUpdated[i] = false)\r\n      : (arrayUpdated[i] = undefined);\r\n    if (state) {\r\n      for (let index = 0; index < arrayUpdated.length; index++) {\r\n        let arrayPuzzleSolve = puzzleSolve;\r\n        if (arrayPuzzleSolve[index] === undefined) {\r\n          arrayPuzzleSolve[index] = item;\r\n          setPuzzleSolve(arrayPuzzleSolve);\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      let arrayPuzzleDisolve = puzzleSolve;\r\n      for (let index = 0; index < arrayPuzzleDisolve.length; index++) {\r\n        let arrayPuzzleDisolve = puzzleSolve;\r\n        if (arrayPuzzleDisolve[index] === item) {\r\n          arrayPuzzleDisolve[index] = undefined;\r\n          setPuzzleSolve(arrayPuzzleDisolve);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    setStateArrayItems(arrayUpdated);\r\n    forceUpdate();\r\n  };\r\n\r\n  if (textContent && stateArrayItems) {\r\n    let ikey = 0;\r\n    return (\r\n      <div>\r\n        <Grid container className={classes.rootGrid}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\">\r\n              {puzzleSolve.map((content) => {\r\n                ikey += 1;\r\n                return (\r\n                  <Grid key={ikey} item>\r\n                    <Zoom in={content !== undefined}>\r\n                      <Card className={classes.rootEmptyCard}>\r\n                        {content === undefined ? null : (\r\n                          <CardContent onClick={() => setText(content, false)}>\r\n                            <Typography className={classes.title}>\r\n                              {content === undefined\r\n                                ? null\r\n                                : Array.from(content)[0]}\r\n                            </Typography>\r\n                          </CardContent>\r\n                        )}\r\n                      </Card>\r\n                    </Zoom>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n            <Grid container justify=\"center\">\r\n              {textContent.map((content) => {\r\n                ikey += 10;\r\n                let i = textContent.indexOf(content);\r\n                return (\r\n                  <Grid key={ikey} item>\r\n                    <Zoom in={stateArrayItems[i] === undefined}>\r\n                      <Card className={classes.rootCard}>\r\n                        {stateArrayItems[i] !== undefined ? null : (\r\n                          <CardContent onClick={() => setText(content, true)}>\r\n                            <Typography className={classes.title}>\r\n                              {stateArrayItems[i] !== undefined\r\n                                ? null\r\n                                : Array.from(content)[0]}\r\n                            </Typography>\r\n                          </CardContent>\r\n                        )}\r\n                      </Card>\r\n                    </Zoom>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n            <Grid container justify=\"center\">\r\n              <Grid item>\r\n                <Button\r\n                  disabled={!puzzleSolve[0]}\r\n                  onClick={finalSolve}\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  className={classes.buttonCheck}\r\n                >\r\n                  Siguiente\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  onClick={previousLevel}\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  className={classes.buttonCheck}\r\n                >\r\n                  Anterior\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Typography>Loading...</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}